{"version":3,"file":"static/js/836.75734d82.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Contacts/Contacts.module.css?5e71","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsForm/ContactsForm.module.css?d5f2","webpack://goit-react-hw-08-phonebook/./src/components/InputLabel/InputLabel.module.css?2b4e","components/InputLabel/InputLabel.jsx","redux/contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/Contacts/Contacts.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"find\":\"Contacts_find__V-KCM\",\"phn\":\"Contacts_phn__MpAzQ\",\"phn2\":\"Contacts_phn2__6U7WR\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"formBook\":\"ContactsForm_formBook__i5nAb\",\"title\":\"ContactsForm_title__cd5Wh\",\"phn\":\"ContactsForm_phn__foUNu\",\"btn\":\"ContactsForm_btn__qImoL\"};","// extracted by mini-css-extract-plugin\nexport default {\"labelBook\":\"InputLabel_labelBook__7DRZv\",\"inputBook\":\"InputLabel_inputBook__c4GBx\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './InputLabel.module.css';\n\nconst InputLabel = ({ name, value, onChange, type, pattern, title, id }) => {\n  return (\n    <label className={css.labelBook} htmlFor={id}>\n      <input\n        className={css.inputBook}\n        id={id}\n        type={type}\n        name={name}\n        pattern={pattern}\n        title={title}\n        required\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nInputLabel.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  type: PropTypes.string.isRequired,\n  pattern: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default InputLabel;\n","export const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { nanoid } from 'nanoid';\nimport css from './ContactsForm.module.css';\nimport InputLabel from '../InputLabel/InputLabel';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/contactsSlice';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport React, { useState } from 'react';\n\nconst ContactsForm = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const contactExists = contacts.some(contact => contact.name === name);\n    if (contactExists) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ id: nanoid(), name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  return (\n    <form\n      className={css.formBook}\n      onSubmit={handleSubmit}\n      onClick={() => dispatch(setFilter(''))}\n    >\n      <div className={css.title}>Name:</div>\n      <InputLabel\n        id={nameId}\n        name=\"name\"\n        type=\"text\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        value={name}\n        onChange={handleChange}\n      />\n      <div className={css.title}>Namber:</div>\n      <InputLabel\n        id={numberId}\n        name=\"number\"\n        type=\"tel\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        value={number}\n        onChange={handleChange}\n      />\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactsForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Z4FuP\",\"buttonDelete\":\"ContactItem_buttonDelete__icmIc\",\"contactName\":\"ContactItem_contactName__ZAMAK\"};","import PropTypes from 'prop-types';\nimport css from './ContactItem.module.css';\n\nconst ContactItem = ({ id, name, number, onDelete }) => (\n  <li className={css.contactItem}>\n    <p className={css.contactName}>\n      {name}: {number}\n    </p>\n    <button\n      className={css.buttonDelete}\n      type=\"button\"\n      onClick={() => onDelete(id)}\n    >\n      Delete\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import ContactItem from '../ContactItem/ContactItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <ul>\n      {filteredContacts.map((contact, index) => (\n        <ContactItem\n          key={`${contact.id}-${index}`}\n          {...contact}\n          onDelete={handleDeleteContact}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"inputFilter\":\"Filter_inputFilter__8QMOp\"};","import css from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <input\n        className={css.inputFilter}\n      value={filter}\n      onChange={handleFilterChange}\n    />\n  );\n};\n\nexport default Filter;\n","import React, { useEffect } from 'react';\nimport css from './Contacts.module.css';\nimport ContactsForm from '../ContactsForm/ContactsForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n  const isError = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.phonebook}>\n      <h1 className={css.phn}>Phonebook</h1>\n      <ContactsForm />\n      <h2 className={css.phn2}>Contacts</h2>\n      <p className={css.find}>Find contacts by name</p>\n      <Filter />\n      {isLoading && !isError && (\n        <p style={{ marginTop: '15px', fontSize: '18px', marginLeft: '30px', color: 'blue' }}>\n          Request in progress...\n        </p>\n      )}\n      <ContactList />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__BnqXB\"};","import { Helmet } from 'react-helmet';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport css from './ContactsPage.module.css';\n\nexport default function ContactsPage() {\n  return (\n    <div className={css.container}>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Contacts />\n    </div>\n  );\n}\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","_ref","name","value","onChange","type","pattern","title","_jsx","className","css","htmlFor","children","required","selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","handleChange","evt","_evt$target","target","nameId","numberId","_jsxs","onSubmit","preventDefault","some","contact","alert","concat","addContact","onClick","setFilter","InputLabel","onDelete","filteredContacts","toLowerCase","includes","handleDeleteContact","contactId","deleteContact","map","index","ContactItem","_objectSpread","e","Contacts","isError","useEffect","fetchContacts","phonebook","phn","ContactsForm","phn2","find","Filter","style","marginTop","fontSize","marginLeft","color","ContactList","ContactsPage","container","Helmet"],"sourceRoot":""}